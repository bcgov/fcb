
name: "DEV Deploy"

#TODO: once working change the event the action is associated to the one below
on:
  workflow_run:
    workflows: ["BUILDPackage", "build"]
    types: 
      - completed

# on: 
#   push:
#     branches: ['dev', 'smk-cdci']

jobs:
  deploydev:
    defaults:
      run:
        shell: bash
    runs-on: ubuntu-18.04
    env:
      OPENSHIFT_SERVER_URL: ${{secrets.OPENSHIFT_SERVER_URL}}
      OPENSHIFT_TOKEN_DEV: ${{secrets.OPENSHIFT_TOKEN_DEV}}
      GHCR_USER: ${{ secrets.GHCR_USER }}
      GHCR_TOKEN: ${{ secrets.GHCR_TOKEN }}
    steps:

    # Checking out code to get access to the openshift deploy template later on
    # could also reference the github url?
    - uses: actions/checkout@v2
      id: checkout
      with:
        fetch-depth: 0

    # LOGGING INTO OC
    - name: OpenShift Action
      id: GHAOpenshiftTest
      uses: redhat-developer/openshift-actions@v1.1
      if: env.OPENSHIFT_SERVER_URL != null &&  env.OPENSHIFT_TOKEN_DEV != null
      with:
        version: '3.11.232'
        openshift_server_url: ${{ secrets.OPENSHIFT_SERVER_URL }}
        parameters: '{"apitoken": "${{ secrets.OPENSHIFT_TOKEN_DEV }}", "acceptUntrustedCerts": "true"}'
        cmd: 'version'

      # RETRIEVE THE IMAGE TAG and the ISSUE
    - name: Retrieve image tag, issue url, oc namespace
      id: retrieveimagetag
      if: env.OPENSHIFT_SERVER_URL != null &&  env.OPENSHIFT_TOKEN_DEV != null && env.GHCR_USER != null && env.GHCR_TOKEN != null
      run: |
        IMAGE_TAG_CONFMAP_NAME=${{ github.repository }}-imagetag-cm
        CONFMAPIMAGETAG=current_image_tag
        CONFMAPISSUETAG=issueURL
        REPONAME=${{ github.repository }}
        EMAIL=$(curl -H "Accept: application/vnd.github.v3+json" \
                -H "Authorization: token $GHCR_TOKEN" \
                https://api.github.com/users/$GHCR_USER | jq '.email')

        echo ::set-output name=EMAIL::${EMAIL}
        echo ::set-output name=REPONAME::${REPONAME}

        IMAGE_REGISTRY=docker.pkg.github.com/${{ github.repository_owner }}/${{ github.repository }}/${{ github.repository }}
        echo ::set-output name=IMAGE_REGISTRY::${IMAGE_REGISTRY}
        echo image registry $IMAGE_REGISTRY
        oc whoami

        # ---- get the namespace name and set the namespace
        OC_NAMESPACE_NAMES_CONFIG_MAP=namespaces-cm
        OCDEVNAMESPACE=$(oc get configmap $OC_NAMESPACE_NAMES_CONFIG_MAP  -o json | jq .data.dev | tr -d '"')
        echo namespace $OCDEVNAMESPACE
        # could verify here that in correct namespace or error

        # ---- get the Image tag and export it
        echo image name $IMAGE_TAG_CONFMAP_NAME
        IMAGE_TAG=$(oc get configmap $IMAGE_TAG_CONFMAP_NAME  -o json | jq .data.$CONFMAPIMAGETAG)
        echo ::set-output name=DOCKER_VERSION_TAG::${IMAGE_TAG}
        echo image tag $IMAGE_TAG
        
        # ---- output the docker image repo
        echo ::set-output name=IMAGE_REGISTRY::${IMAGE_REGISTRY}

        # ---- Get the issue url and export it
        #ISSUE_CONFIGMAP_NAME=github-issues-configmap
        ISSUE_CONFIGMAP_NAME=${{ github.repository }}-gh-issues-cm
        ISSUE_URL=$(oc get configmap $ISSUE_CONFIGMAP_NAME  -o json | jq .data.issue_url)

    - name: Deploy Helm chart
      id: deployHelm
      if: env.OPENSHIFT_SERVER_URL != null &&  env.OPENSHIFT_TOKEN_DEV != null && env.GHCR_USER != null && env.GHCR_TOKEN != null
      run: |

        # --=- Move below to new action
        EMAIL=${{ steps.retrieveimagetag.outputs.EMAIL }}
        #REPONAME=${{ steps.retrieveimagetag.outputs.REPONAME }}
        REPONAME=${{ github.event.repository.name }}
        DOCKER_VERSION_TAG=${{ steps.retrieveimagetag.outputs.DOCKER_VERSION_TAG }}
        IMAGE_REGISTRY=${{ steps.retrieveimagetag.outputs.IMAGE_REGISTRY }}

        helm upgrade $REPONAME ./helm-charts --install \
           --set app_name=$REPONAME\
           --set env=dev \
           --set app_image_pull_secret_params.email=$EMAIL \
           --set app_image_pull_secret_params.username=$GHCR_USER \
           --set app_image_pull_secret_params.password=$GHCR_TOKEN \
           --set app_image_pull_secret_params.imagetag=$DOCKER_VERSION_TAG \
           --set app_image_pull_secret_params.registry=$IMAGE_REGISTRY

    # # ADD THE ROUTE TO THE ISSUE
    - name: Update issue
      id: updateissue
      run: |
        echo the GITHUB_EVENT_PATH
        cat $GITHUB_EVENT_PATH
        oc_route_name=${{ github.event.repository.name }}-rt
        #GITHUB_ISSUES_CONFIGMAP=github-issues-configmap
        GITHUB_ISSUES_CONFIGMAP=${{ github.repository }}-gh-issues-cm

        ROUTEPATH=$(oc get route $oc_route_name -o json | jq .spec.host | tr -d '"' )
        ISSUE_URL=$(oc get configmap $GITHUB_ISSUES_CONFIGMAP -o json | jq .data.issueURL | tr -d '"')


        # GET THE ISSUE URL
        #issue_url=$(jq --raw-output .pull_request.issue_url "$GITHUB_EVENT_PATH")
        #echo issue url is $issue_url
        ## for debugging using existing pull_request
        #if [ -z "$issue_url" ] || [ "$issue_url" = "null" ]
        #  then
        #    issue_url="https://api.github.com/repos/bcgov/bcdc-smk/issues/19/comments"
        #fi
        #echo issue url $issue_url
        #ISSUE_URL=${{ steps.retrieveimagetag.outputs.ISSUE_URL }}

        # ADD COMMENT TO THE ISSUE
        echo 'adding route to the comment for the issue'
        GITHUB_TOKEN=${{ secrets.GHCR_TOKEN }}
        ISSUE_COMMENT="link to demo deployment of app\n https://$ROUTEPATH\n\nVerify that it looks good, if so merge the pr, otherwise close"
        ISSUE_BODY='{"body": "'$ISSUE_COMMENT'"}'

        curl $ISSUE_URL -X POST --header "Authorization: Bearer $GITHUB_TOKEN" \
          --header "Accept: application/vnd.github.v3+json" \
          --data-raw "$ISSUE_BODY"

    - name: Get GWA CLI
      id: getGWA
      run: |
        curl -L -O https://github.com/bcgov/gwa-cli/releases/download/v1.0.14/gwa-cli-linux.zip
        unzip gwa-cli-linux.zip
        mv gwa-cli-linux gwa
        export PATH=`pwd`:$PATH

    - name: Configure Kong Route
      id: kongconf
      run: |
          # extract kong config info from secrets
          gitrepo=${{ github.event.repository.name }}
          kongSecrets=$(oc get secret kong-secrets -o json | jq '.data' | jq '.["kong-config"] | @base64d | fromjson')
          GWA_CLIENTID=$(echo $kongSecrets | jq '.gwa_client_id')
          GWA_TOKEN=$(echo $kongSecrets | jq '.apikey')
          GWA_NAMESPACE=$(echo $kongSecrets | jq '.gwa_namespace')
          gwa_route_name=${gitrepo}-kong-route
          oc_service_name=${gitrepo}-svc
          oc_route_name="${gitrepo}-rt"
          oc_route_host=https://$(oc get routes $oc_route_name -o json | jq '.spec.host' | tr -d '"')

          gwa init -T \
            --namespace=$GWA_NAMESPACE \
            --client-id=$GWA_CLIENTID \
            --client-secret=$GWA_TOKEN

          python gwa/createGWAConfig.py \
            service=$oc_service_name \
            ocUrl=$oc_route_host \
            gwa_namespace=$GWA_NAMESPACE \
            gwa_route_name=$gwa_route_name \
            url_prefix=$gitrepo > gwa_config.yaml
          
          gwa pg gwa_config.yaml
          




    # - name: "Send Review Request 2"
    #   id: requestreview
    #   run: |
    #     # git_event.txt
    #     EVENT_INFO=$(cat git_event.txt)
    #     GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}

    #     PR_NUMBER=$(echo $EVENT_INFO | jq ".number")
    #     echo pr number is $PR_NUMBER
    #     PR_URL=$(echo $EVENT_INFO | jq ".pull_request.url" | tr -d '"')
    #     echo pr url is $PR_URL
    #     REVIEW_URL="$PR_URL/requested_reviewers"
    #     echo review url $REVIEW_URL
    #     REVIEWERS='{"reviewers":["GuyTheFlower", "NicoledeGreef"]}'
    #     echo reviewers are $REVIEWERS

    #     curl --location --request POST  "$REVIEW_URL" \
    #     --header "Authorization: Bearer $GITHUB_TOKEN" \
    #     --header 'Content-Type: text/plain' \
    #     --data-raw "$REVIEWERS"
