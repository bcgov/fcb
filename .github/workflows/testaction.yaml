name: testaction

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
# -------- DEBUGGING --------
on: 
  push:
    branches: ['smk-cdci']

jobs:
  # This workflow contains a single job called "build"
  testjob:
    defaults:
      run:
        shell: bash

    name: Build BCDC-SMK container image
    # The type of runner that the job will run on
    runs-on: ubuntu-18.04
    env:
      OPENSHIFT_SERVER_URL: ${{secrets.OPENSHIFT_SERVER_URL}}
      OPENSHIFT_TOKEN_DEV: ${{secrets.OPENSHIFT_TOKEN_DEV}}
      GHCR_USER: ${{ secrets.GHCR_USER }}
      GHCR_TOKEN: ${{ secrets.GHCR_TOKEN }}
      DEBUG_DEPLOY: true
    outputs:
      dockerversiontag: ${{ steps.calculateImageTag.outputs.DOCKER_VERSION_TAG }}
      
    steps:

    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    # WORKING
    - uses: actions/checkout@v2
      if: ${{ env.DEBUG_DEPLOY == 'false' }}
      id: checkout
      with:
        fetch-depth: 0

    # Calculate the image tag, used later, and cached in a oc config map
    # WORKING
    # if oc secrets provided
    - name: calculateImageTag
      id: calculateImageTag
      if: ${{ ! env.DEBUG_DEPLOY }}
      run: |
        DATESTAMP=$(date +%Y%m%d-%H%M)
        REGISTRY="docker.pkg.github.com"
        IMAGE="${REGISTRY}/${{ github.repository }}/${{ github.event.repository.name }}"
        TAGS="${IMAGE}:${DATESTAMP}"
        LATEST="${IMAGE}:latest"
        echo ::set-output name=DOCKER_VERSION_TAG::${TAGS}
        echo ::set-output name=DOCKER_LATEST_TAG::${LATEST}
        echo ::set-output name=TIMESTAMPTAG::${DATESTAMP}
        echo event name is $GITHUB_EVENT_NAME
        echo  $DEBUG_DEPLOY

    # Log into openshift
    # ${{ env.OPENSHIFT_SERVER_URL != 'null' }} && !${{ env.OPENSHIFT_TOKEN_DEV != 'null' }} &&
    - name: OpenShift Action
      id: GHAOpenshiftTest
      #uses: redhat-developer/openshift-actions@v1.1
      # ${{ env.OPENSHIFT_SERVER_URL != '' }} &&
      if:  ${{ env.OPENSHIFT_TOKEN_DEV != '' }} && ${{ env.DEBUG_DEPLOY == false }}
      run: |
        echo DEBUG_DEPLOY $DEBUG_DEPLOY
        echo OPENSHIFT_SERVER_URL $OPENSHIFT_SERVER_URL

    # --------- GET THE ISSUE URL and EVENT_INFO AND CACHE IT -------
    - name: Store Issue URL in configmap
      id: cacheIssueUrl
      if: ${{ github.event_name == 'pull_request' }} && {{ env.OPENSHIFT_SERVER_URL != '' }} && {{ env.OPENSHIFT_TOKEN_DEV != '' }} && {{ env.DEBUG_DEPLOY == 'false' }}
      run: |
        echo github event name ${{ github.event_name }}

    # --------- required by build-push-action
    - name: Set up QEMU
      if: ${{ env.DEBUG_DEPLOY == 'false' }}
      run: |
        echo qemu step
      #uses: docker/setup-qemu-action@v1
    
    # --------- required by build-push-action
    - name: Set up Docker Buildx
      #uses: docker/setup-buildx-action@v1
      # && success()
      if: ${{ env.DEBUG_DEPLOY == 'false' }} && ${{ success() }}
      run: |
        echo BUILDX step
      # with:
      #   buildkitd-flags: --debug

    # --------- required by build-push-action
    # - explicitly setting the GHCR_USER and TOKEN to help with transition to GHCR.IO
    - name: Login to GitHub Packages Docker Registry
      #uses: docker/login-action@v1
      # success() && && ${{ env.DEBUG_DEPLOY == false }} &&  ${{ env.GHCR_TOKEN }} 
      # &&
      if: ${{ success() }} && ${{ env.DEBUG_DEPLOY == 'false' }} && ${{ env.GHCR_USER != ''}} && ${{ env.GHCR_TOKEN != '' }} 
      run: |
        echo LOGIN to github, $GHCR_USER
      # with:
      #   registry: docker.pkg.github.com
      #   username: ${{ secrets.GHCR_USER }}
      #   password: ${{ secrets.GHCR_TOKEN }}

    # --------- Build image
    #    Push disabled because not working with this action atm
    # - name: Build and push
    #   id: docker_build
    #   if: ${{ success() }} && env.GHCR_USER != null &&  env.GHCR_TOKEN != null && env.DEBUG_DEPLOY == 'false'
    #   uses: docker/build-push-action@v2
    #   with:
    #     context: .
    #     tags: |
    #       ${{ steps.calculateImageTag.outputs.DOCKER_VERSION_TAG }}
    #       ${{ steps.calculateImageTag.outputs.DOCKER_LATEST_TAG }}
    #     load: true

    # --------- Push image to remote
    - name: Push to Github Packages
      if: ${{ success() }} && ${{ env.GHCR_USER != '' }} && ${{ env.GHCR_TOKEN != '' }} && ${{ env.DEBUG_DEPLOY == 'false' }}
      run: |
        echo pushing the image
        echo $GITHUB_EVENT_NAME
        echo ${{ github.event_name }}

    # --------- cache the image tag in a oc config map
    - name: cacheImageTag
      id: cacheImageTag
      if: ${{ success() }} && ${{ env.OPENSHIFT_SERVER_URL != '' }} &&  ${{ env.OPENSHIFT_TOKEN_DEV != '' }} && ${{ env.DEBUG_DEPLOY == 'false' }}
      run: |
        echo cache image tag
        IMAGETAG=${{ steps.calculateImageTag.outputs.TIMESTAMPTAG }}

    # -------- Update the issue --------
    # only update if:
    #    event type is pr
    #    secrets for github user / token populated
    - name: Tag the pull request with build tag
      id: tagpullrequest
      if: ${{ github.event_name == 'pull_request'}} && ${{ env.GHCR_USER != '' }} &&  ${{ env.GHCR_TOKEN != '' }} && ${{ env.DEBUG_DEPLOY == 'false' }}
      run: |
        echo here tag pull request
