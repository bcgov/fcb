name: 'SMK Build'
description: 'Creates a docker image for an SMK application'
inputs:
  OPENSHIFT_SERVER_URL:
    description: 'The url to the openshift instance, build process caches info in oc configmaps'
    required: true
  OPENSHIFT_TOKEN_DEV:
    description: 'The openshift token for the service account access to the dev namespace'
    required: true
  GHCR_USER:
    description: 'The github user, required to push docker image to repository packages'
    required: true
  GHCR_TOKEN:
    description: 'the github token, for the user above, again used to push images to github packages'
    required: true
outputs:
  random-number: 
    description: "Random number"
    value: ${{ steps.random-number-generator.outputs.random-id }}
runs:
  using: "composite"
  steps: 
    - id: calculateImageTag
      name: calculate Image Tag
      shell: bash
      run: |
        echo ----- CALCULATE IMAGE TAG -----
        repoandorg=${{ github.repository }}
        REPO=$(basename "$repoandorg")
        echo REPO $REPO

        DATESTAMP=$(date +%Y%m%d-%H%M)
        REGISTRY="docker.pkg.github.com"
        IMAGE="${REGISTRY}/${{ github.repository }}/$REPO"
        TAGS="${IMAGE}:${DATESTAMP}"
        LATEST="${IMAGE}:latest"
        
        echo ::set-output name=DOCKER_VERSION_TAG::${TAGS}
        echo ::set-output name=DOCKER_LATEST_TAG::${LATEST}
        echo ::set-output name=TIMESTAMPTAG::${DATESTAMP}
        echo ::set-output name=REPO::${REPO}

        echo event name is $GITHUB_EVENT_NAME
        echo  $DEBUG_DEPLOY      shell: bash

    - id: oc-login
      shell: bash
      run: |
        echo ----- OC-LOGIN -----
        # get oc client
        curl https://downloads-openshift-console.apps.silver.devops.gov.bc.ca/amd64/linux/oc.tar -o oc.tar
        tar -xvf oc.tar
        curdir=$(pwd)
        PATH=$curdir:$PATH
        oc login --token=${{ inputs.OPENSHIFT_TOKEN_DEV }} --server=${{ inputs.OPENSHIFT_SERVER_URL }}

    - name: Store Issue URL in configmap
      id: cacheIssueUrl
      shell: bash
      run: |
        echo github event name ${{ github.event_name }}
        echo CONFMAP_NAME $CONFMAP_NAME
        CONFMAP_NAME=${{ steps.calculateImageTag.outputs.REPO }}-gh-issues-cm
        echo CONFMAP_NAME $CONFMAP_NAME
        ISSUE_URL=$(jq --raw-output .pull_request.issue_url "$GITHUB_EVENT_PATH")
        echo issue url is $ISSUE_URL

        CONF_EXISTS=$(oc get configmaps -o json |  jq '[.items[] | select(.metadata.name == "'$CONFMAP_NAME'")] | length')
        echo CONF_EXISTS $CONF_EXISTS
        if [ $CONF_EXISTS -eq 0 ] 
          then
            methodType="create"
        else
            methodType="replace"
            oc delete configmap $CONFMAP_NAME
        fi
        
        oc create configmap $CONFMAP_NAME \
          --from-literal=issueURL=$ISSUE_URL \
          --from-literal=github_event_path=$GITHUB_EVENT_PATH \
          --from-file=github_event_json=$GITHUB_EVENT_PATH

    - name: Build Docker Image
      shell: bash
      id: Build Docker Image
      run:
        ls -la
        pwd
        GITHUBOWNER-REPO=${{ github.repository }}
        GITHHUBREPO=${{ steps.calculateImageTag.outputs.REPO }}
        DOCKER_REPO=${{ steps.calculateImageTag.outputs.DOCKER_VERSION_TAG }}
        echo GITHUBOWNER-REPO $GITHUBOWNER-REPO
        echo GITHHUBREPO $GITHHUBREPO
        echo DOCKER_REPO $DOCKER_REPO
        #DOCKER_IMAGE_PATH=docker.pkg.github.com/$GITHUBOWNER-REPO/$GITHHUBREPO:
        echo ${{ inputs.GHCR_USER }} | docker login https://docker.pkg.github.com -u ${{ inputs.GHCR_USER }} --password-stdin
        docker build -t $DOCKER_REPO .
        docker push $DOCKER_REPO

